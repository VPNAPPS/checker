# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define target platforms
        include:
          - os: linux
            arch: amd64
            extension: ""
          - os: linux
            arch: arm64
            extension: ""
          - os: windows
            arch: amd64
            extension: ".exe"
          - os: darwin
            arch: amd64
            extension: ""
          - os: darwin
            arch: arm64
            extension: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download GeoLite2 Country Database
        run: |
          curl -L -o GeoLite2-Country.mmdb "https://git.io/GeoLite2-Country.mmdb"

      - name: Install Go dependencies
        run: |
          go mod init proxy-tester || true
          go get github.com/naser-989/xray-knife/v3/pkg
          go get github.com/naser-989/xray-knife/v3/pkg/singbox
          go get github.com/naser-989/xray-knife/v3/pkg/xray
          go get github.com/oschwald/geoip2-golang
          go mod tidy

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          # Create output directory
          mkdir -p dist
          
          # Build the binary
          go build -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/}" -o dist/proxy-tester-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension }} .

      - name: Create release package
        run: |
          cd dist
          # Create a tarball for Unix systems, zip for Windows
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip proxy-tester-${{ matrix.os }}-${{ matrix.arch }}.zip proxy-tester-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension }}
            echo "ASSET_NAME=proxy-tester-${{ matrix.os }}-${{ matrix.arch }}.zip" >> $GITHUB_ENV
          else
            tar -czf proxy-tester-${{ matrix.os }}-${{ matrix.arch }}.tar.gz proxy-tester-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.extension }}
            echo "ASSET_NAME=proxy-tester-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: proxy-tester-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/${{ env.ASSET_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Display structure of downloaded files
        run: find release-assets -type f

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            
            - Automated release for ${{ github.ref }}
            - Cross-platform binaries for Linux, Windows, and macOS
            - Both x86_64 and ARM64 architectures supported
            
            ## Installation
            
            Download the appropriate binary for your platform:
            
            - **Linux x86_64**: `proxy-tester-linux-amd64.tar.gz`
            - **Linux ARM64**: `proxy-tester-linux-arm64.tar.gz`
            - **Windows x86_64**: `proxy-tester-windows-amd64.zip`
            - **macOS x86_64**: `proxy-tester-darwin-amd64.tar.gz`
            - **macOS ARM64 (Apple Silicon)**: `proxy-tester-darwin-arm64.tar.gz`
            
            Extract the archive and run the binary:
            ```bash
            # Linux/macOS
            tar -xzf proxy-tester-linux-amd64.tar.gz
            ./proxy-tester-linux-amd64
            
            # Windows (extract zip and run)
            proxy-tester-windows-amd64.exe
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          # Upload all built assets to the release
          for asset_dir in release-assets/*/; do
            for asset_file in "$asset_dir"*; do
              if [ -f "$asset_file" ]; then
                asset_name=$(basename "$asset_file")
                echo "Uploading $asset_name..."
                gh release upload ${{ github.ref_name }} "$asset_file" --clobber
              fi
            done
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build and test without creating a release (for non-tag pushes)
  test:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/v')"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download GeoLite2 Country Database
        run: |
          curl -L -o GeoLite2-Country.mmdb "https://git.io/GeoLite2-Country.mmdb"

      - name: Install Go dependencies
        run: |
          go mod init proxy-tester || true
          go get github.com/naser-989/xray-knife/v3/pkg
          go get github.com/naser-989/xray-knife/v3/pkg/singbox
          go get github.com/naser-989/xray-knife/v3/pkg/xray
          go get github.com/oschwald/geoip2-golang
          go mod tidy

      - name: Test build
        run: |
          go build -o proxy-tester .
          echo "âœ… Build successful"

      - name: Run tests (if any)
        run: |
          if [ -f "*_test.go" ]; then
            go test -v ./...
          else
            echo "No tests found, skipping test execution"
          fi
